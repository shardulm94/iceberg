# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000DictionaryOff

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 29.243 s/op
# Warmup Iteration   2: 17.952 s/op
# Warmup Iteration   3: 17.405 s/op
Iteration   1: 15.522 s/op
Iteration   2: 15.000 s/op
Iteration   3: 15.558 s/op
Iteration   4: 15.420 s/op
Iteration   5: 15.239 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000DictionaryOff":
  N = 5
  mean =     15.348 ±(99.9%) 0.888 s/op

  Histogram, s/op:
    [14.900, 14.950) = 0 
    [14.950, 15.000) = 1 
    [15.000, 15.050) = 0 
    [15.050, 15.100) = 0 
    [15.100, 15.150) = 0 
    [15.150, 15.200) = 0 
    [15.200, 15.250) = 1 
    [15.250, 15.300) = 0 
    [15.300, 15.350) = 0 
    [15.350, 15.400) = 0 
    [15.400, 15.450) = 1 
    [15.450, 15.500) = 0 
    [15.500, 15.550) = 1 
    [15.550, 15.600) = 1 

  Percentiles, s/op:
      p(0.0000) =     15.000 s/op
     p(50.0000) =     15.420 s/op
     p(90.0000) =     15.558 s/op
     p(95.0000) =     15.558 s/op
     p(99.0000) =     15.558 s/op
     p(99.9000) =     15.558 s/op
     p(99.9900) =     15.558 s/op
     p(99.9990) =     15.558 s/op
     p(99.9999) =     15.558 s/op
    p(100.0000) =     15.558 s/op


# Run complete. Total time: 00:02:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt   Score   Error  Units
IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000DictionaryOff    ss    5  15.348 ± 0.888   s/op

Benchmark result is saved to /Users/smahadik/iceberg/spark2/build/reports/jmh/results.txt
