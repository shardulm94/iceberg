# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg2000

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 147.074 s/op
# Warmup Iteration   2: 138.215 s/op
# Warmup Iteration   3: 138.311 s/op
Iteration   1: 136.587 s/op
Iteration   2: 136.047 s/op
Iteration   3: 137.199 s/op
Iteration   4: 137.184 s/op
Iteration   5: 137.497 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg2000":
  N = 5
  mean =    136.903 ±(99.9%) 2.239 s/op

  Histogram, s/op:
    [136.000, 136.125) = 1 
    [136.125, 136.250) = 0 
    [136.250, 136.375) = 0 
    [136.375, 136.500) = 0 
    [136.500, 136.625) = 1 
    [136.625, 136.750) = 0 
    [136.750, 136.875) = 0 
    [136.875, 137.000) = 0 
    [137.000, 137.125) = 0 
    [137.125, 137.250) = 2 
    [137.250, 137.375) = 0 
    [137.375, 137.500) = 1 
    [137.500, 137.625) = 0 
    [137.625, 137.750) = 0 
    [137.750, 137.875) = 0 

  Percentiles, s/op:
      p(0.0000) =    136.047 s/op
     p(50.0000) =    137.184 s/op
     p(90.0000) =    137.497 s/op
     p(95.0000) =    137.497 s/op
     p(99.0000) =    137.497 s/op
     p(99.9000) =    137.497 s/op
     p(99.9900) =    137.497 s/op
     p(99.9990) =    137.497 s/op
     p(99.9999) =    137.497 s/op
    p(100.0000) =    137.497 s/op


# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000

# Run progress: 33.33% complete, ETA 00:37:15
# Fork: 1 of 1
# Warmup Iteration   1: 257.524 s/op
# Warmup Iteration   2: 241.691 s/op
# Warmup Iteration   3: 245.976 s/op
Iteration   1: 244.543 s/op
Iteration   2: 241.960 s/op
Iteration   3: 244.367 s/op
Iteration   4: 247.217 s/op
Iteration   5: 248.174 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000":
  N = 5
  mean =    245.252 ±(99.9%) 9.533 s/op

  Histogram, s/op:
    [241.000, 241.500) = 0 
    [241.500, 242.000) = 1 
    [242.000, 242.500) = 0 
    [242.500, 243.000) = 0 
    [243.000, 243.500) = 0 
    [243.500, 244.000) = 0 
    [244.000, 244.500) = 1 
    [244.500, 245.000) = 1 
    [245.000, 245.500) = 0 
    [245.500, 246.000) = 0 
    [246.000, 246.500) = 0 
    [246.500, 247.000) = 0 
    [247.000, 247.500) = 1 
    [247.500, 248.000) = 0 
    [248.000, 248.500) = 1 

  Percentiles, s/op:
      p(0.0000) =    241.960 s/op
     p(50.0000) =    244.543 s/op
     p(90.0000) =    248.174 s/op
     p(95.0000) =    248.174 s/op
     p(99.0000) =    248.174 s/op
     p(99.9000) =    248.174 s/op
     p(99.9900) =    248.174 s/op
     p(99.9990) =    248.174 s/op
     p(99.9999) =    248.174 s/op
    p(100.0000) =    248.174 s/op


# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000DictionaryOff

# Run progress: 66.67% complete, ETA 00:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 152.748 s/op
# Warmup Iteration   2: 146.904 s/op
# Warmup Iteration   3: 142.149 s/op
Iteration   1: 144.311 s/op
Iteration   2: 145.822 s/op
Iteration   3: 148.236 s/op
Iteration   4: 147.741 s/op
Iteration   5: 149.325 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000DictionaryOff":
  N = 5
  mean =    147.087 ±(99.9%) 7.717 s/op

  Histogram, s/op:
    [144.000, 144.500) = 1 
    [144.500, 145.000) = 0 
    [145.000, 145.500) = 0 
    [145.500, 146.000) = 1 
    [146.000, 146.500) = 0 
    [146.500, 147.000) = 0 
    [147.000, 147.500) = 0 
    [147.500, 148.000) = 1 
    [148.000, 148.500) = 1 
    [148.500, 149.000) = 0 
    [149.000, 149.500) = 1 

  Percentiles, s/op:
      p(0.0000) =    144.311 s/op
     p(50.0000) =    147.741 s/op
     p(90.0000) =    149.325 s/op
     p(95.0000) =    149.325 s/op
     p(99.0000) =    149.325 s/op
     p(99.9000) =    149.325 s/op
     p(99.9900) =    149.325 s/op
     p(99.9990) =    149.325 s/op
     p(99.9999) =    149.325 s/op
    p(100.0000) =    149.325 s/op


# Run complete. Total time: 01:11:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
IcebergSourceNestedORCDataWriteBenchmark.writeIceberg2000                  ss    5  136.903 ± 2.239   s/op
IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000                 ss    5  245.252 ± 9.533   s/op
IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000DictionaryOff    ss    5  147.087 ± 7.717   s/op

Benchmark result is saved to /Users/smahadik/iceberg/spark2/build/reports/jmh/results.txt
