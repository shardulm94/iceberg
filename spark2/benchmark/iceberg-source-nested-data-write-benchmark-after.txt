# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg2000

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 14.022 s/op
# Warmup Iteration   2: 8.946 s/op
# Warmup Iteration   3: 8.825 s/op
Iteration   1: 8.669 s/op
Iteration   2: 8.760 s/op
Iteration   3: 8.854 s/op
Iteration   4: 8.596 s/op
Iteration   5: 8.598 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg2000":
  N = 5
  mean =      8.696 ±(99.9%) 0.429 s/op

  Histogram, s/op:
    [8.500, 8.525) = 0 
    [8.525, 8.550) = 0 
    [8.550, 8.575) = 0 
    [8.575, 8.600) = 2 
    [8.600, 8.625) = 0 
    [8.625, 8.650) = 0 
    [8.650, 8.675) = 1 
    [8.675, 8.700) = 0 
    [8.700, 8.725) = 0 
    [8.725, 8.750) = 0 
    [8.750, 8.775) = 1 
    [8.775, 8.800) = 0 
    [8.800, 8.825) = 0 
    [8.825, 8.850) = 0 
    [8.850, 8.875) = 1 
    [8.875, 8.900) = 0 

  Percentiles, s/op:
      p(0.0000) =      8.596 s/op
     p(50.0000) =      8.669 s/op
     p(90.0000) =      8.854 s/op
     p(95.0000) =      8.854 s/op
     p(99.0000) =      8.854 s/op
     p(99.9000) =      8.854 s/op
     p(99.9900) =      8.854 s/op
     p(99.9990) =      8.854 s/op
     p(99.9999) =      8.854 s/op
    p(100.0000) =      8.854 s/op


# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000

# Run progress: 20.00% complete, ETA 00:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 129.530 s/op
# Warmup Iteration   2: 115.562 s/op
# Warmup Iteration   3: 117.279 s/op
Iteration   1: 115.003 s/op
Iteration   2: 115.175 s/op
Iteration   3: 115.757 s/op
Iteration   4: 117.377 s/op
Iteration   5: 118.419 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000":
  N = 5
  mean =    116.346 ±(99.9%) 5.737 s/op

  Histogram, s/op:
    [115.000, 115.250) = 2 
    [115.250, 115.500) = 0 
    [115.500, 115.750) = 0 
    [115.750, 116.000) = 1 
    [116.000, 116.250) = 0 
    [116.250, 116.500) = 0 
    [116.500, 116.750) = 0 
    [116.750, 117.000) = 0 
    [117.000, 117.250) = 0 
    [117.250, 117.500) = 1 
    [117.500, 117.750) = 0 
    [117.750, 118.000) = 0 
    [118.000, 118.250) = 0 
    [118.250, 118.500) = 1 
    [118.500, 118.750) = 0 

  Percentiles, s/op:
      p(0.0000) =    115.003 s/op
     p(50.0000) =    115.757 s/op
     p(90.0000) =    118.419 s/op
     p(95.0000) =    118.419 s/op
     p(99.0000) =    118.419 s/op
     p(99.9000) =    118.419 s/op
     p(99.9900) =    118.419 s/op
     p(99.9990) =    118.419 s/op
     p(99.9999) =    118.419 s/op
    p(100.0000) =    118.419 s/op


# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg5000DictionaryOff

# Run progress: 40.00% complete, ETA 00:25:59
# Fork: 1 of 1
# Warmup Iteration   1: 10.905 s/op
# Warmup Iteration   2: 5.278 s/op
# Warmup Iteration   3: 4.136 s/op
Iteration   1: 3.914 s/op
Iteration   2: 3.856 s/op
Iteration   3: 3.805 s/op
Iteration   4: 4.018 s/op
Iteration   5: 3.970 s/op


Result "org.apache.iceberg.spark.source.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg5000DictionaryOff":
  N = 5
  mean =      3.913 ±(99.9%) 0.329 s/op

  Histogram, s/op:
    [3.800, 3.825) = 1 
    [3.825, 3.850) = 0 
    [3.850, 3.875) = 1 
    [3.875, 3.900) = 0 
    [3.900, 3.925) = 1 
    [3.925, 3.950) = 0 
    [3.950, 3.975) = 1 
    [3.975, 4.000) = 0 
    [4.000, 4.025) = 1 
    [4.025, 4.050) = 0 
    [4.050, 4.075) = 0 
    [4.075, 4.100) = 0 

  Percentiles, s/op:
      p(0.0000) =      3.805 s/op
     p(50.0000) =      3.914 s/op
     p(90.0000) =      4.018 s/op
     p(95.0000) =      4.018 s/op
     p(99.0000) =      4.018 s/op
     p(99.9000) =      4.018 s/op
     p(99.9900) =      4.018 s/op
     p(99.9990) =      4.018 s/op
     p(99.9999) =      4.018 s/op
    p(100.0000) =      4.018 s/op


# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.parquet.IcebergSourceNestedParquetDataWriteBenchmark.writeIceberg2000

# Run progress: 60.00% complete, ETA 00:12:07
# Fork: 1 of 1
# Warmup Iteration   1: 5.478 s/op
# Warmup Iteration   2: 2.788 s/op
# Warmup Iteration   3: 2.757 s/op
Iteration   1: 2.694 s/op
Iteration   2: 2.699 s/op
Iteration   3: 2.773 s/op
Iteration   4: 2.627 s/op
Iteration   5: 2.665 s/op


Result "org.apache.iceberg.spark.source.parquet.IcebergSourceNestedParquetDataWriteBenchmark.writeIceberg2000":
  N = 5
  mean =      2.692 ±(99.9%) 0.208 s/op

  Histogram, s/op:
    [2.600, 2.613) = 0 
    [2.613, 2.625) = 0 
    [2.625, 2.638) = 1 
    [2.638, 2.650) = 0 
    [2.650, 2.663) = 0 
    [2.663, 2.675) = 1 
    [2.675, 2.688) = 0 
    [2.688, 2.700) = 2 
    [2.700, 2.713) = 0 
    [2.713, 2.725) = 0 
    [2.725, 2.738) = 0 
    [2.738, 2.750) = 0 
    [2.750, 2.763) = 0 
    [2.763, 2.775) = 1 
    [2.775, 2.788) = 0 
    [2.788, 2.800) = 0 

  Percentiles, s/op:
      p(0.0000) =      2.627 s/op
     p(50.0000) =      2.694 s/op
     p(90.0000) =      2.773 s/op
     p(95.0000) =      2.773 s/op
     p(99.0000) =      2.773 s/op
     p(99.9000) =      2.773 s/op
     p(99.9900) =      2.773 s/op
     p(99.9990) =      2.773 s/op
     p(99.9999) =      2.773 s/op
    p(100.0000) =      2.773 s/op


# JMH version: 1.21
# VM version: JDK 1.8.0_212, Java HotSpot(TM) 64-Bit Server VM, 25.212-b10
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_212.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.apache.iceberg.spark.source.parquet.IcebergSourceNestedParquetDataWriteBenchmark.writeIceberg20000

# Run progress: 80.00% complete, ETA 00:04:40
# Fork: 1 of 1
# Warmup Iteration   1: 28.150 s/op
# Warmup Iteration   2: 25.334 s/op
# Warmup Iteration   3: 25.488 s/op
Iteration   1: 24.804 s/op
Iteration   2: 24.636 s/op
Iteration   3: 24.605 s/op
Iteration   4: 24.731 s/op
Iteration   5: 24.778 s/op


Result "org.apache.iceberg.spark.source.parquet.IcebergSourceNestedParquetDataWriteBenchmark.writeIceberg20000":
  N = 5
  mean =     24.711 ±(99.9%) 0.335 s/op

  Histogram, s/op:
    [24.600, 24.625) = 1 
    [24.625, 24.650) = 1 
    [24.650, 24.675) = 0 
    [24.675, 24.700) = 0 
    [24.700, 24.725) = 0 
    [24.725, 24.750) = 1 
    [24.750, 24.775) = 0 
    [24.775, 24.800) = 1 
    [24.800, 24.825) = 1 
    [24.825, 24.850) = 0 
    [24.850, 24.875) = 0 
    [24.875, 24.900) = 0 

  Percentiles, s/op:
      p(0.0000) =     24.605 s/op
     p(50.0000) =     24.731 s/op
     p(90.0000) =     24.804 s/op
     p(95.0000) =     24.804 s/op
     p(99.0000) =     24.804 s/op
     p(99.9000) =     24.804 s/op
     p(99.9900) =     24.804 s/op
     p(99.9990) =     24.804 s/op
     p(99.9999) =     24.804 s/op
    p(100.0000) =     24.804 s/op


# Run complete. Total time: 00:22:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt    Score   Error  Units
o.a.i.s.s.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg2000                 ss    5    8.696 ± 0.429   s/op
o.a.i.s.s.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg20000                ss    5  116.346 ± 5.737   s/op
o.a.i.s.s.orc.IcebergSourceNestedORCDataWriteBenchmark.writeIceberg5000DictionaryOff    ss    5    3.913 ± 0.329   s/op
o.a.i.s.s.parquet.IcebergSourceNestedParquetDataWriteBenchmark.writeIceberg2000         ss    5    2.692 ± 0.208   s/op
o.a.i.s.s.parquet.IcebergSourceNestedParquetDataWriteBenchmark.writeIceberg20000        ss    5   24.711 ± 0.335   s/op

Benchmark result is saved to /Users/smahadik/iceberg/spark2/build/reports/jmh/results.txt
